  <chapter id="ImageEffectClipPreferences"><title>Image Effect Clip Preferences</title>
    <para>
      The <link linkend="kOfxImageEffectActionGetClipPreferences"><code>kOfxImageEffectActionGetClipPreferences</code></link> 
      action is passed to an effect to allow a plugin to specify how it wishes to deal with it's input clips and to set
      properties in it's output clip. This is especially important when there are multiple inputs of which my have differing properties, eg; pixel depth.
    </para>
    <para>
      More specifically, there are six properties that can be set during the clip preferences action, some on the input clip, some on the output clip, some on both. These are...
      <itemizedlist>
	<listitem>the depth of a clip's pixels, input or output clip,</listitem>
	<listitem>the components of a clip's pixels, input or output clip,</listitem>
	<listitem>the pixel aspect ratio of a clip, input or output clip,</listitem>
	<listitem>the frame rate of the output clip, </listitem>
	<listitem>the fielding of the output clip,</listitem>
	<listitem>the premultiplication state of the output clip,</listitem>
	<listitem>whether the output clip varys from frame to frame, even if no paramerters or input images change over time,</listitem>
	<listitem>whether the output clip can be sampled at sub-frame times and produce different images.</listitem>
      </itemizedlist>
    </para>
    <para>
      The behaviour specified by OFX means that a host may need to cast images from their native data format into one suitable for the plugin. It is better that the host do any of this pixel shuffling because,
      <itemizedlist>
	<listitem>the behaviour is orthogonal for all plugins on that host,</listitem>
	<listitem>the code is not replicated in all plugins,</listitem>
	<listitem>the host can optimise the pixel shuffling in one pass with any other data grooming it may need to do.</listitem>
      </itemizedlist>
    </para>

    <para>
A plugin gets to assert its clip preferences in several situations. Firstly whenever a clip is attached to a plugin, secondly whenever one of the parameters in the plugin property <link linkend="kOfxImageEffectPropClipPreferencesSlaveParam"><code>kOfxImageEffectPropClipPreferencesSlaveParam</code></link> has its value changed. The clip preferences action is never called until all non optional clips have been attached to the plugin.
    </para>

    &note;
    <para>
      <itemizedlist>
	<listitem>these properties <emphasis>cannot</emphasis> animate over the duration of an effect,</listitem>
	<listitem>that the ability to set input and output clip preferences is restricted by the context of an effect,</listitem>
	<listitem>optional input clips do not have any context specific restrictions on plugin set preferences.</listitem>
      </itemizedlist>
    </para>

    <section id="ImageEffectClipPreferencesFrameVarying"><title>Frame Varying Effects</title>
      <para>
	Some plugins can generate differing output frames at different times, even if no parameters animate or no input images change. The <link linkend="kOfxImageEffectFrameVarying"><code>kOfxImageEffectFrameVarying</code></link> property set in the clip preferences action is used to flag this.
      </para>

      <para>
	A counter example is a solid colour generator. If it has no animating parameters, the image generated at frame 0 will be the same as the image generated at any other frame. Intellegent hosts can render a single frame and cache that for use at all other times. 
      </para>
      <para>
On the other hand, a plugin that generates random noise at each frame, and seeds its random number generator with the render time, will create different images at different times. The host cannot render a single frame and cache that for use at subsequent times.
      </para>
      <para>
To differentiate between these two cases the <link linkend="kOfxImageEffectFrameVarying"><code>kOfxImageEffectFrameVarying</code></link> is used. If set to 1, it indicates that the effect will need to be rendered at each frame, even if no input images or parameters are varying. If set to 0, then a single frame can be rendered and used for all times if no input images or parameters vary. The default value is 0.
      </para>
    </section>

    <section><title>Continuously Sampled Effects</title>
      <para>
Some effects can generate images at non frame boundaries, even if the inputs to the effect are frame based and there is no animation.
      </para>
      <para>
For example a fractal cloud generator whose pattern evolves with a speed parameter can be rendered at arbitrary times, not just on frame boundaries. Hosts that are interested in sub frame rendering can determine this by behaviour by examining the <link linkend="kOfxImageClipPropContinuousSamples"><code>kOfxImageClipPropContinuousSamples</code></link> property set in the clip preferences action. By default this is false.
      </para>
      &note;
      <para>
	Implicitly, all retimers effects can be continuously sampled.
      </para>
    </section>

    <section><title>Specifying Pixel Depths</title>
      <para>
Hosts and plugins flag whether whether they can deal with input/output clips of differing pixel depths via the <link linkend="kOfxImageEffectPropSupportsMultipleClipDepths"><code>kOfxImageEffectPropSupportsMultipleClipDepths</code></link> property.
      </para>
      <para>
If the host sets this to 0, then all effect's input and output clips will always have the same component depth, and the plugin may not remap them.
      </para>
If the plugin sets this to 0, then the host will transparently map all of an effect's input and output clips to a single depth, even if the actual clips are of differing depths.
      <para>
In the above two cases, the common component depth chosen will be the deepest depth of any input clip mapped to a depth the plugin supports that loses the least precision. eg: if a plugin supported 8 bit and float images, but the deepest clip attached to it was 16 bit, the host would transparently map all clips to float. 
      </para>
      <para>
If both the plugin and host set this to 1, then the plugin can, during the <link linkend="kOfxImageEffectActionGetClipPreferences"><code>kOfxImageEffectActionGetClipPreferences</code></link>, specify how the host is to map each clip, including the output clip. Note that this is the only case where a plugin may set the output depth.
      </para>
    </section>

    <section><title>Specifying Pixel Components</title>
      <para>
A plugin specifies what components it is willing to accept on a clip via the <link linkend="kOfxImageEffectPropSupportedComponents"><code>kOfxImageEffectPropSupportedComponents</code></link> on the clip's descriptor during the <link linkend="kOfxImageEffectActionDescribeInContext"><code>kOfxImageEffectActionDescribeInContext</code></link>. This is one or more of RGBA, YUVA and A.
      </para>
      <para>
If an effect has multiple inputs, and each can be a range of component types, the effect may end up with component types that are incompatible for its purposes. In this case the effect will want to have the host remap the components of the inputs and to specify the components in the output.
      </para>
      <para>
For example, a general effect that blends two images will have have two inputs, each of which may be RGBA or A. In operation, if presented with RGBA on one and A on the other, it will most likely request that the A clip be mapped to RGBA by the host and the output be RGBA as well.
      </para>
      <para>
In all contexts, except for the general context, mandated input clips cannot have their component types remapped, nor can the output. Optional input clips can always have their component types remapped.
      </para>
      <para>
In the general context, all input clips may be remapped, as can the output clip. The output clip has it's default components set to be,
  - RGBA if any of the inputs is RGBA,
  - otherwise YUVA if any of the inputs is YUVA,
  - otherwise A if the effect has any inputs,
  - otherwise RGBA if there are no inputs.
      </para>
      &note;
      <para>
It a host implementation detail as to how a host actually attaches real clips to a plugin. For instance, a host may allow a YUVA clip to be wired to an input that asks for RGBA only. However it must map the clip to RGBA in a manner that is transparent to the plugin. Similarly for any other component types that the plugin does not support on an input.
      </para>
    </section>
    
    <section><title>Specifying Pixel Aspect Ratios</title>
      <para>
Hosts and plugins flag whether whether they can deal with input/output clips of differing pixel aspect ratios via the <link linkend="kOfxImageEffectPropSupportsMultipleClipPARs"><code>kOfxImageEffectPropSupportsMultipleClipPARs</code></link> property.
      </para>
      <para>
If the host sets this to 0, then all effect's input and output clips will always have the same pixel aspect ratio, and the plugin may not remap them.
      </para>
      <para>
If the plugin sets this to 0, then the host will transparently map all of an effect's input and output clips to a single pixel aspect ratio, even if the actual clips are of differring PARs.
      </para>
      <para>
In the above two cases, the common pixel aspect ratio chosen will be the smallest on all the inputs, as this preserves image data.
      </para>
      <para>
If <emphasis>both</emphasis> the plugin and host set this to 1, then the plugin can, during <link linkend="kOfxImageEffectActionGetClipPreferences"><code>kOfxImageEffectActionGetClipPreferences</code></link>, specify how the host is to map each clip, including the output clip.
	</para>
    </section>
    <section><title>Specifying Fielding</title>
      <para>
The <link linkend="kOfxImageEffectPropSetableFielding"><code>kOfxImageEffectPropSetableFielding</code></link> host property indicates if a plugin is able to change the fielding of the output clip from the default.
      </para>
      <para>
The default value of the output clip's fielding is host dependant, but in general,
	<itemizedlist>
	  <listitem>if any of the input clips are fielded, so will the output clip</listitem>
	  <listitem>the output clip may be fielded irregardless of the input clips (for example, in a fielded project).</listitem>
	</itemizedlist>
      </para>
      <para>
If the host allows a plugin to specify the fielding of the output clip, then a plugin may do so during the <link linkend="kOfxImageEffectActionGetClipPreferences"><code>kOfxImageEffectActionGetClipPreferences</code></link> by setting the property <link linkend="kOfxImageClipPropFieldOrder"><code>kOfxImageClipPropFieldOrder</code></link> in the out args argumment of the action. For example a defielding plugin will want to indicate that the output is frame based rather than fielded.
      </para>
    </section>


    <section><title>Specifying Frame Rates</title>
      <para>
	The <link linkend="kOfxImageEffectPropSetableFrameRate"><code>kOfxImageEffectPropSetableFrameRate</code></link> host property indicates if a plugin is able to change the frame rate of the output clip from the default.
      </para>

      <para>
The default value of the output clip's frame rate is host dependant, but in general, it will be based on the input clips frame rates.
      </para>
      <para>
If the host allows a plugin to specify the frame rate of the output clip, then a plugin may do so during the <link linkend="kOfxImageEffectActionGetClipPreferences"><code>kOfxImageEffectActionGetClipPreferences</code></link>. For example a deinterlace plugin that separates both fields from fielded footage will want to do double the frame rate of the output clip.
      </para>
      <para>
If a plugin changes the frame rate, it is effectively changing the number of frames in the output clip. If our hypothetical deinterlace plugin doubles the frame rate of the output clip, it will be doubling the number of frames in that clip. The timing diagram below should help, showing how our fielded input has been turned into twice the number of frames on output.
      </para>
      <programlisting>
   FIELDED SOURCE      0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 ....
   DEINTELACED OUTPUT  0   1   2   3   4   5   6   7   8   9 </programlisting>

      <para>
	The maping of the number of output frames is...
      </para>
      <programlisting>
	nFrames' = nFrames * FPS' / FPS </programlisting>
      <para>
	<itemizedlist>
	  <listitem>nFrames is the default number of frames,</listitem>
	  <listitem>nFrames' is the new number of output frames,</listitem>
	  <listitem>FPS is the default frame rate,</listitem>
	  <listitem>FPS' is the new frame rate specified by a plugin.</listitem>
	</itemizedlist>
      </para>
    </section>
    
    <section><title>Specifying Premultiplication</title>
      <para>
	All clips have a premultiplication state (see http://www.teamten.com/lawrence/graphics/premultiplication/ for a nice explanation). An effect cannot map the premultiplication state of the input clips, but it can specify the premultiplication state of the output clip.
      </para>
      <para>
	The output's default premultiplication state is...
	<itemizedlist>
	  <listitem>premultiplied if any of the inputs are premultiplied,</listitem>
	  <listitem>otherwise unpremultiplied if any of the inputs are unpremultiplied,</listitem>
	  <listitem>otherwise opaque.</listitem>
	</itemizedlist>
      </para>
    </section>

  </chapter>
