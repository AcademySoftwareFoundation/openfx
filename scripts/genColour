#!/usr/bin/env python3

# Copyright OpenFX and contributors to the OpenFX project.
# SPDX-License-Identifier: BSD-3-Clause

# Extract information from an OCIO config to C header.
# Example invocation:
# OCIO=include/ofx-native-v1.5_aces-v1.3_ocio-v2.3.ocio scripts/genColour > include/ofx-native-v1.5_aces-v1.3_ocio-v2.3.h

import sys
import PyOpenColorIO as OCIO
from string import Template

header = '''#ifndef _${config_name_us}_h_
#define _${config_name_us}_h_

// Copyright OpenFX and contributors to the OpenFX project.
// SPDX-License-Identifier: BSD-3-Clause

#ifdef __cplusplus
extern "C" {
#endif

/** @file ${config_name}.h
Contains the list of supported colourspaces.
This file was auto-generated by scripts/genColour from $config_name.
*/

// For use with kOfxImageEffectPropColourManagementAvailableConfigs
#define kOfxConfigIdentifier "$config_name"
'''

footer = '''
#ifdef __cplusplus
}
#endif

#endif
'''

role_docs = {
   'ofx_display_sdr': 'Any display-referred SDR video such as Rec. 709.',
   'ofx_display_hdr': 'Any display-referred HDR video such as Rec. 2100 HLG or PQ.',
   'ofx_scene_log': 'Any scene-referred colourspace with a log transfer function.',
   'ofx_scene_linear': 'Any scene-referred linear colourspace.',
   'ofx_raw': 'Image values should not be treated as colour, e.g. motion vectors or masks.',
   'aces_interchange': 'Guaranteed to be ACES2065-1.',
   'cie_xyz_d65_interchange': 'CIE XYZ colorimetry with the neutral axis at D65.',
   'color_picking': 'The colourspace to use for colour pickers, typically a display colourspace.',
   'color_timing': 'A colourspace suitable for colour grading, typically a log colourspace.',
   'compositing_log': 'Any scene-referred colourspace with a log transfer function.',
   'data': 'Image values should not be treated as colour, e.g. motion vectors or masks. Mapped to the raw colourspace.',
   'matte_paint': 'A colourspace suitable for matte painting.',
   'scene_linear': 'Any scene-referred linear colourspace.',
   'texture_paint': 'A colourspace suitable for texture painting, typically sRGB.'
   }

basic_colourspace_labels = {
   'ofx_display_sdr': 'OFX generic display SDR',
   'ofx_display_hdr': 'OFX generic display HDR',
   'ofx_scene_log': 'OFX generic scene log',
   'ofx_scene_linear': 'OFX generic scene linear',
   'ofx_raw': 'OFX generic raw'
}

chars_to_delete = str.maketrans('', '', ' -.()')
def camel_name(name):
   return ' '.join([word[0].upper() + word[1:] for word in name.replace(' ', '_').split('_')]).translate(chars_to_delete)

define_base = '#define kOfxColourspace'

def colourspace_short_name(spc):
   name = spc.getName()
   aliases = spc.getAliases()
   if ' ' in name and len(aliases) > 0:
      return aliases[0]
   else:
      return name

def print_name(name):
   print(f'{define_base}{camel_name(name)} "{name}"')

def print_metadata(name, label, reference_space, encoding, is_data, is_basic, is_core):
   print_string_property(name, 'Label', label)
   print_string_property(name, 'Encoding', encoding)
   print_bool_property(name, 'Data', is_data)
   print_bool_property(name, 'Basic', is_basic)
   print_bool_property(name, 'Core', is_core)
   print_bool_property(name, 'Display', reference_space == OCIO.ReferenceSpaceType.REFERENCE_SPACE_DISPLAY)

# Basic colourspaces are actually OCIO roles with additional metadata
def print_basic_colourspace(role):
   role_name = role[0]
   spc = ofx_config.getColorSpace(role[1])
   print(f'\n/** @brief {role_name}\n{role_docs[role_name]}\n*/')
   print_name(role_name)
   print_metadata(role_name, basic_colourspace_labels[role_name], spc.getReferenceSpaceType(), spc.getEncoding(), spc.isData(), True, True)

def print_role(role):
   role_name = role[0]
   role_prefix = f'Role{camel_name(role_name)}'
   print(f'\n/** @brief {role_name}\n{role_docs[role_name]}\n*/')
   print(f'{define_base}{role_prefix} "{role_name}"')
   # non-basic roles are included in the core style
   print_bool_property(role_prefix, 'Basic', False)
   print_bool_property(role_prefix, 'Core', True)

def print_string_property(name, propname, value):
   print(f'{define_base}{camel_name(name)}{propname} "{value}"')

def print_bool_property(name, propname, value):
   print(f'{define_base}{camel_name(name)}Is{propname} {str(value).lower()}')

def print_list(name, list):
   name_list = '{ "' + '", "'.join(list) + '" }'
   print(f'{define_base}{camel_name(name)}List {name_list}')

def print_colourspace(spc, is_core):
   name = colourspace_short_name(spc)
   label = spc.getName()
   print(f'\n// {name}\n//', '\n// '.join(spc.getDescription().split('\n')).replace('\n// \n', '\n'))
   print_name(name)
   print_metadata(name, label, spc.getReferenceSpaceType(), spc.getEncoding(), spc.isData(), False, is_core)
   
# OFX-specific set of basic roles
basic_roles = ['ofx_raw', 'ofx_scene_linear', 'ofx_display_sdr', 'ofx_scene_log', 'ofx_display_hdr']

# OFX-specific set of core colourspaces
core_spaces = ['srgb_display', 'displayp3_display', 'rec1886_rec709_display',
               'ACES2065-1', 'ACEScc', 'ACEScct',
               'ACEScg', 'lin_p3d65', 'lin_rec2020',
               'lin_rec709_srgb', 'g18_rec709_tx', 'g22_ap1_tx',
               'g22_rec709_tx', 'g24_rec709_tx', 'srgb_encoded_ap1_tx',
               'srg_encoded_p3d65_tx', 'srgb_tx', 'Raw',
               'rec1886_rec2020_display', 'rec2100_hlg_display', 'rec2100_pq_display',
               'st2084_p3d65_display', 'p3d65_display']

# This should be the OpenFX OCIO config created by genOCIOConfig
ofx_config = OCIO.GetCurrentConfig()

# Add OFX-specific basic colourspaces here rather than in genOCIOConfig
# to avoid creating an expectation that these mappings should always be used.
# The assigned colourspaces are chosen simply to generate the correct
# attributes in the header.
ofx_config.setRole('ofx_display_sdr', 'rec1886_rec709_display')
ofx_config.setRole('ofx_display_hdr', 'rec2100_hlg_display')
ofx_config.setRole('ofx_scene_log', 'ACEScct')
ofx_config.setRole('ofx_scene_linear', 'ACEScg')
ofx_config.setRole('ofx_raw', 'raw')

config_name = ofx_config.getName()
print(Template(header).substitute(config_name=config_name,
                                  config_name_us=config_name.replace('-', '_').replace('.', '_')))

print('// Basic Colourspaces\n// These colourspaces are generic names for any colourspace with the correct attributes.')
for basic_role in [role for role in ofx_config.getRoles() if role[0] in basic_roles]:
   print_basic_colourspace(basic_role)

print('\n// Core Colourspaces')
for core_spc in [spc for spc in ofx_config.getColorSpaces() if colourspace_short_name(spc) in core_spaces]:
   print_colourspace(core_spc, True)

print('\n// Non-core Colourspaces')
for other_spc in [spc for spc in ofx_config.getColorSpaces() if colourspace_short_name(spc) not in core_spaces]:
   print_colourspace(other_spc, False)

print('''\n/** @brief Roles - standard names used for compatibility with common OCIO configs.
*/''')
for role in [role for role in ofx_config.getRoles() if role[0] not in basic_roles]:
   print_role(role)

print(footer)
