#!/usr/bin/env python3

# Copyright OpenFX and contributors to the OpenFX project.
# SPDX-License-Identifier: BSD-3-Clause

# Extract information from an OCIO config to C header.
# OCIO environment variable must point to the config being extracted.
# Example invocation:
# OCIO=ocio://studio-config-v1.0.0_aces-v1.3_ocio-v2.1 scripts/genColour > include/ofxColourspaceList.h

import PyOpenColorIO as OCIO
from string import Template

header = '''#ifndef _ofxColourspaceList_h_
#define _ofxColourspaceList_h_

// Copyright OpenFX and contributors to the OpenFX project.
// SPDX-License-Identifier: BSD-3-Clause

#ifdef __cplusplus
extern "C" {
#endif

/** @file ofxColourspaceList.h
Contains the list of supported colourspaces.
This file was auto-generated by scripts/genColour from $config_name.
*/
'''

footer = '''
#ifdef __cplusplus
}
#endif

#endif
'''

chars_to_delete = str.maketrans('', '', ' -.()')
def camel_name(name):
   return ' '.join([word[0].upper() + word[1:] for word in name.replace(' ', '_').split('_')]).translate(chars_to_delete)

define_base = '#define kOfxColourspace'

def print_name(name):
   print(f'{define_base}{camel_name(name)} "{name}"')

def print_role(role):
   print(f'\n// {role[0]}')
   print(f'{define_base}Role{camel_name(role[0])} "{role[0]}"')
   print(f'{define_base}Role{camel_name(role[0])}Colourspace "{role[1]}"')
   role_map = '{ "' + role[0] + '", "' + role[1] + '" }'
   print(f'{define_base}Role{camel_name(role[0])}Mapping {role_map}')
   
def print_string_property(name, propname, value):
   print(f'{define_base}{camel_name(name)}{propname} "{value}"')

def print_bool_property(name, propname, value):
   print(f'{define_base}{camel_name(name)}Is{propname} {str(value).lower()}')

def print_list(name, list):
   name_list = '{ "' + '", "'.join(list) + '" }'
   print(f'{define_base}{camel_name(name)}List {name_list}')

config = OCIO.GetCurrentConfig()
def print_colourspace(spc):
   name = spc.getName()
   print(f'\n// {name}\n//', '\n// '.join(spc.getDescription().split('\n')).replace('\n// \n', '\n'))
   name_list = [name]
   for alias in spc.getAliases():
      name_list.append(alias)
      print_string_property(name, f'Alias{camel_name(alias)}', alias)
   print_list(name, name_list)
   print_string_property(name, 'Encoding', spc.getEncoding())
   print_bool_property(name, 'SceneLinear', config.isColorSpaceLinear(name, OCIO.REFERENCE_SPACE_SCENE))
   print_bool_property(name, 'Data', spc.isData())

print(Template(header).substitute(config_name=config.getName()))

print('// Roles')
for role in config.getRoles():
   print_role(role)

print('\n// Display Colourspaces')
for display in config.getDisplays():
   print_colourspace(config.getColorSpace(display))

print('\n// Scene Colourspaces')
for spc in config.getColorSpaces():
   print_colourspace(spc)

print(footer)
